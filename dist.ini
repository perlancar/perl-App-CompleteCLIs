version=0.02

name=App-CompleteCLIs

[Rinci::ScriptFromFunc]

;; these are lower-level functions that accept words & cword, not word, we exclude them atm
;script= name=complete-bash-history, func=/Complete/Bash/History/complete_cmdline_from_hist
;script= name=complete-getopt-long,  func=/Complete/Getopt/Long/complete_cli_arg

script=                             func=/Complete/Dist/complete_dist
script=                             func=/Complete/Dist/Zilla/complete_dzil_bundle
script=                             func=/Complete/Dist/Zilla/complete_dzil_plugin
script=                             func=/Complete/Dist/Zilla/complete_dzil_role
script=                             func=/Complete/Man/complete_manpage
script=                             func=/Complete/Module/complete_module
script=                             func=/Complete/Pod/Weaver/complete_weaver_bundle
script=                             func=/Complete/Pod/Weaver/complete_weaver_plugin
script=                             func=/Complete/Pod/Weaver/complete_weaver_role
script=                             func=/Complete/Pod/Weaver/complete_weaver_section
script=                             func=/Complete/Riap/complete_riap_url
script=                             func=/Complete/Unix/complete_uid
script=                             func=/Complete/Unix/complete_gid
script=                             func=/Complete/Unix/complete_user
script=                             func=/Complete/Unix/complete_group
script=                             func=/Complete/Unix/complete_pid
script=                             func=/Complete/Unix/complete_proc_name

; because in Perinci::CmdLine::Base, Complete::Util::complete_array_elem is
; mentioned, perl creates the Complete::Util package (anytime a package is
; mentioned e.g. with 'require' or calling a function, even though the code is
; not run yet, perl already creates the package) and this makes
; Perinci::Access::Lite not load the module because it sees that the package
; already exists. thus we force loading Complete::Util first before running
; Perinci::CmdLine::Lite.
script=                             func=/Complete/Util/complete_array_elem, snippet_before_instantiate_cmdline=use Complete::Util;
script=                             func=/Complete/Util/complete_hash_key, snippet_before_instantiate_cmdline=use Complete::Util;
script=                             func=/Complete/Util/complete_env, snippet_before_instantiate_cmdline=use Complete::Util;
script=                             func=/Complete/Util/complete_file, snippet_before_instantiate_cmdline=use Complete::Util;
script=                             func=/Complete/Util/complete_program, snippet_before_instantiate_cmdline=use Complete::Util;

[@Author::PERLANCAR]
:version=0.23

[Prereqs]
;!lint-prereqs assume-used # spec
Rinci=1.1.0
;!lint-prereqs assume-used # spec
Complete=0.06

perl=5.010001

;!lint-prereqs assume-used # undetected, used via riap
Complete::Bash::History=0
;!lint-prereqs assume-used # undetected, used via riap
Complete::Dist=0
;!lint-prereqs assume-used # undetected, used via riap
Complete::Dist::Zilla=0
;!lint-prereqs assume-used # undetected, used via riap
Complete::Getopt::Long=0
;!lint-prereqs assume-used # undetected, used via riap
Complete::Man=0
;!lint-prereqs assume-used # undetected, used via riap
Complete::Module=0
;!lint-prereqs assume-used # undetected, used via riap
Complete::Pod::Weaver=0
;!lint-prereqs assume-used # undetected, used via riap
Complete::Riap=0
;!lint-prereqs assume-used # undetected, used via riap
Complete::Unix=0.03
;!lint-prereqs assume-used # undetected, used via riap
Complete::Util=0.21
